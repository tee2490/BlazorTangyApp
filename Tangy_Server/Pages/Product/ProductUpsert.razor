@page "/product/create"
@page "/product/edit/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject IProductRepository _productRepository
@inject NavigationManager _navigationManager
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime
@attribute [Authorize]

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>

    <div class="col-md-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Name" />
                </div>
                <div class="form-group">
                    <label>Color</label>
                    <InputText @bind-Value="Product.Color" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Color" />
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <SfRichTextEditor @bind-Value="Product.Description"></SfRichTextEditor>
                    <ValidationMessage For="()=>Product.Description" />
                </div>

                <div class="row pt-3">
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Shop Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Customer Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6 mt-2">
                        <label>Category</label>
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                            <option value="0" disabled="disabled" selected>--Select Category--</option>
                            @foreach (var cat in Categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }

                        </InputSelect>
                        <ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>
                    </div>
                    <div class="form-group col-6">
                        <InputFile OnChange="HandleImageUpload"></InputFile>
                    </div>
                </div>

                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="product" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
        <div class="col-md-2">
            <img src="@Product.ImageUrl" class="w-100 rounded-3">
        </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private ProductDTO Product { get; set; } = new()
        {
            ImageUrl = "/images/default.png"
        };
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }
    public string OldImageUrl { get; set; }
    public IBrowserFile FileImage { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            await LoadProduct();
        }

    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        if (Id != 0)
        {
            //update
            Title = "Update";
            Product = await _productRepository.Get(Id);
            OldImageUrl = Product.ImageUrl;
        }

        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertProduct()
    {
        if (FileImage is not null)
        {
            //บันทึกรูปภาพ
            Product.ImageUrl = await _fileUpload.UploadFile(FileImage);
        }

        if (Product.Id == 0)
        {
            //create
            await _productRepository.Create(Product);
            await _jsRuntime.ToastrSuccess("Product created successfully.");
        }
        else
        {
            //update
            if (OldImageUrl != Product.ImageUrl)
            {
                _fileUpload.DeleteFile(OldImageUrl);

            }
            await _productRepository.Update(Product);
            await _jsRuntime.ToastrSuccess("Product updated successfully.");
        }
        _navigationManager.NavigateTo("product");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var imagefiletypes = new List<string>() { ".png", ".jpg", ".jpeg" };

        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    //ดึงนามสกุลและแปลงเป็นตัวเล็ก
                    var extensionname = Path.GetExtension(file.Name).ToLower();

                    if (imagefiletypes.Contains(extensionname))
                    {
                        FileImage = file; //เก็บไฟล์ไว้ก่อน นำไปใช้ตอนบันทึกจริง

                        #region อ่านภาพแสดงบนจอ
                        using Stream imageStream = file.OpenReadStream(1024 * 1024 * 10);
                        using MemoryStream ms = new();
                        await imageStream.CopyToAsync(ms);

                        //convert stream to base64
                        Product.ImageUrl = $"data:image/png;base64,{Convert.ToBase64String(ms.ToArray())}";
                        #endregion
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        break;
                    }
                }
            }

        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }
     
}